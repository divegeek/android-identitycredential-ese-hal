/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.identity_credential@1.0;

import android.hardware.keymaster.capability@1.0::CapabilityType;

enum Error : int32_t {
    OK = 0
};

enum EntryType : uint8_t {
    INT16,                      // Signed 16-bit integer
    INT32,                      // Signed 32-bit integer
    INT64,                      // Signed 64-bit integer
    BYTES
};

struct EntryData {
    /**
     * The name used to reference the new data entry for retrieval and deletion.  Structure and
     * semantics are up to the caller.
     */
    vec<uint8_t> name;

    /**
     * The type of the entry value.
     */
    EntryType type;

    /**
     * The data value, if type == BYTES.  Structure and semantics are up to the caller.
     */
    vec<uint8_t> bytes;


    /**
     * The data value if type == INT16 || type == INT32 || type == INT64.
     */
    uint64_t integer;

    /**
     * A static digital signature over ``value'' (and perhaps other data elements; semantics are
     * defined by the issuer) which proves that it originated from the issuer.
     */
    vec<uint8_t> issuerSignature;

    /**
     * Indicates whether the issuing authority would like this field to be made directly available,
     * if supported by the secure hardware.
     */
    bool directlyAvailable;
};

/**
 * An AccessControlProfile defines the requirements that may be required to retrieve an entry.  If
 * both readerAuthPubKey and userAuthenticationId are empty, associated entries are open access,
 * requiring no authentication to read (though the caller is free to require other authentication
 * above this HAL.
 */
struct AccessControlProfile {
    /**
     * id is a numeric identifier that must be unique within the context of a Credential and may be
     * used to reference the profile.
     */
    uint8_t id;

    /**
     * readerAuthPubKey, if non-empty, specifies a reader public key that must be used to
     * authenticate requests (see the readerSignature parameter of ICredential.getEntries()).
     */
    vec<uint8_t> readerAuthPubKey;

    /**
     * userAuthenticationId, if non-empty, specifies a 64-bit secure user ID that must be
     * authenticated to allow requests (see the authToken parameter of ICredential.getEntries()).
     * Required authentication freshness is specified by timeout below.
     */
    uint64_t capabilityId;

    CapabilityType capabilityType;

    /**
     * Timeout specifies the amount of time, in seconds, for which a user authentication (see
     * userAuthenticationId above) is valid, if userAuthenticationId is non-empty.  If timout is
     * zero then authentication is required for each reader session.  In that case the authToken
     * provided to getEntries() must contain a SHA-256 hash of the session transcript (see the
     * sessionTranscript parameter of ICredentials.getEntries).
     *
     * If userAutenticationId is empty, timeout must be zero.
     */
    uint32_t timeout;
};

/**
 * EntryConfiguration is used to create a data entry.  See ICredentialStore.createCredential.
 */
struct EntryConfiguration {
    /**
     * Contains all of the data that defines an entry.
     */
    EntryData content;

    /**
     * Defines the access control configurations required to retrieve this data element.  If any one
     * of the specified profiles is satisfied, the element may be retrieved.
     */
    vec<uint8_t> accessControlProfileIds;
};

struct SecureAccessControlProfile {
    /**
     * The access control profile.
     */
    AccessControlProfile accessControlProfile;

    /**
     * The mac is used to authenticate the access control profile.  It contains:
     *
     *      AES-GCM-ENC(storageKey, R, {}, AccessControlProfile)
     *
     *      AccessControlProfile = {
     *          "id": uint,                  ; 8 bits
     *          ? "readerAuthPubKey" : bstr,
     *          ? (
     *              "userAuthTypes": uint,   ; 32 bits
     *              "userSecureId" : uint,   ; 64 bits
     *              ? "timeout": uint,       ; 32 bits
     *          )
     *      }
     */
    vec<uint8_t> mac;
};

struct SecureEntry {
    /**
     * The name of the entry.
     */
    vec<uint8_t> name;

    /**
     * Numeric IDs of the access control profiles associated with this entry.  See
     * AccessControlBlob.id.
     */
    vec<uint8_t> accessControlProfileIds;

    /**
     * For directly-available credentials (see EntryData.directlyAvailable), the contents of
     * ``content'' are implementation-defined but must not exceed 32 bytes in length.
     *
     * For other credentials, content contains AES-GCM-ENC(storageKey, R Data, AdditionalData),
     * where:
     *
     *     Data = {
     *         "val" : int / bstr,   ; EntryData.bytes or EntryData.integer value
     *         "sig" : bstr          ; issuer signature of entry
     *     }
     *
     *     AdditionalData = {
     *         "name" : bstr,
     *         "accessControlProfileIds" : [ + int ],
     *     }
     */
    vec<uint8_t> content;
};
